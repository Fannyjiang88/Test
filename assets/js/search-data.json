{
  
    
        "post0": {
            "title": "Assignment 6",
            "content": "x &lt;- c(1, 3, 2, 5) . x . &lt;ol class=list-inline&gt; 1 | 3 | 2 | 5 | &lt;/ol&gt; x = c(1, 6, 2) . x . &lt;ol class=list-inline&gt; 1 | 6 | 2 | &lt;/ol&gt; y = c(1, 4, 3) . length(x) length(y) x + y . 3 3 &lt;ol class=list-inline&gt; 2 | 10 | 5 | &lt;/ol&gt; ls() rm(x, y) ls() . &lt;ol class=list-inline&gt; &#39;A&#39; | &#39;Auto&#39; | &#39;cylinders&#39; | &#39;f&#39; | &#39;fa&#39; | &#39;lm.fit&#39; | &#39;u&#39; | &#39;x&#39; | &#39;y&#39; | &lt;/ol&gt; &lt;ol class=list-inline&gt; &#39;A&#39; | &#39;Auto&#39; | &#39;cylinders&#39; | &#39;f&#39; | &#39;fa&#39; | &#39;lm.fit&#39; | &#39;u&#39; | &lt;/ol&gt; rm(list = ls()) . ?matrix . x &lt;- matrix(data = c(1, 2, 3, 4), nrow = 2, ncol = 2) x . 1 | 3 | . 2 | 4 | . x &lt;- matrix(c(1, 2, 3, 4), 2, 2) . matrix(c(1, 2, 3, 4), 2, 2, byrow = TRUE) . 1 | 2 | . 3 | 4 | . sqrt(x) x^2 . 1.000000 | 1.732051 | . 1.414214 | 2.000000 | . 1 | 9 | . 4 | 16 | . x &lt;- rnorm(50) y &lt;- x + rnorm(50, mean = 50, sd = .1) cor(x, y) . 0.99363488072198 set.seed(1303) rnorm(50) . &lt;ol class=list-inline&gt; -1.14397631447974 | 1.34212936561501 | 2.18539047574276 | 0.536392517923731 | 0.0631929664685468 | 0.502234482468979 | -0.000416724686432643 | 0.565819840539162 | -0.572522688962623 | -1.11022500727696 | -0.0486871233624514 | -0.695656217619366 | 0.828917480303335 | 0.206652855081802 | -0.235674509102427 | -0.556310491381104 | -0.364754357080585 | 0.862355034263622 | -0.63077153536771 | 0.313602125215739 | -0.931495317661393 | 0.823867618473952 | 0.523370702077482 | 0.706921411979056 | 0.420204325601679 | -0.269052154682033 | -1.51031729990999 | -0.69021247657504 | -0.143471952443572 | -1.0135274099044 | 1.57327373614751 | 0.0127465054882014 | 0.872647049887217 | 0.422066190530336 | -0.0188157916578866 | 2.61574896890584 | -0.693140174826871 | -0.266321780991085 | -0.720636441231524 | 1.36773420645149 | 0.264007332160512 | 0.632186807367191 | -1.33065098578719 | 0.0268888182209596 | 1.0406363207788 | 1.31202379854711 | -0.0300020766733214 | -0.250025712488174 | 0.0234144856913592 | 1.65987065574227 | &lt;/ol&gt; set.seed(3) y &lt;- rnorm(100) . mean(y) var(y) sqrt(var(y)) sd(y) . 0.0110355710943715 0.732867501277449 0.856076808047881 0.856076808047881 x &lt;- rnorm(100) y &lt;- rnorm(100) plot(x, y) plot(x, y, xlab = &quot;this is the x-axis&quot;, ylab = &quot;this is the y-axis&quot;, main = &quot;Plot of X vs Y&quot;) . pdf(&quot;Figure.pdf&quot;) plot(x, y, col = &quot;green&quot;) dev.off() . png: 2 x &lt;- seq(1, 10) x x &lt;- 1:10 x x &lt;- seq(-pi, pi, length = 50) . &lt;ol class=list-inline&gt; 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | &lt;/ol&gt; &lt;ol class=list-inline&gt; 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | &lt;/ol&gt; y &lt;- x f &lt;- outer(x, y, function(x, y) cos(y) / (1 + x^2)) contour(x, y, f) contour(x, y, f, nlevels = 45, add = T) fa &lt;- (f - t(f)) / 2 contour(x, y, fa, nlevels = 15) . image(x, y, fa) persp(x, y, fa) persp(x, y, fa, theta = 30) persp(x, y, fa, theta = 30, phi = 20) persp(x, y, fa, theta = 30, phi = 70) persp(x, y, fa, theta = 30, phi = 40) . A &lt;- matrix(1:16, 4, 4) A . 1 | 5 | 9 | 13 | . 2 | 6 | 10 | 14 | . 3 | 7 | 11 | 15 | . 4 | 8 | 12 | 16 | . A[2, 3] . 10 A[c(1, 3), c(2, 4)] A[1:3, 2:4] A[1:2, ] A[, 1:2] . 5 | 13 | . 7 | 15 | . 5 | 9 | 13 | . 6 | 10 | 14 | . 7 | 11 | 15 | . 1 | 5 | 9 | 13 | . 2 | 6 | 10 | 14 | . 1 | 5 | . 2 | 6 | . 3 | 7 | . 4 | 8 | . A[1, ] . &lt;ol class=list-inline&gt; 1 | 5 | 9 | 13 | &lt;/ol&gt; A[-c(1, 3), ] A[-c(1, 3), -c(1, 3, 4)] . 2 | 6 | 10 | 14 | . 4 | 8 | 12 | 16 | . &lt;ol class=list-inline&gt; 6 | 8 | &lt;/ol&gt; Auto &lt;- read.table(&quot;Auto.data&quot;) View(Auto) . Error in View(Auto): &#39;View()&#39; not yet supported in the Jupyter R kernel Traceback: 1. View(Auto) 2. stop(sQuote(&#34;View()&#34;), &#34; not yet supported in the Jupyter R kernel&#34;) . head(Auto) . V1V2V3V4V5V6V7V8V9 . mpg | cylinders | displacement | horsepower | weight | acceleration | year | origin | name | . 18.0 | 8 | 307.0 | 130.0 | 3504. | 12.0 | 70 | 1 | chevrolet chevelle malibu | . 15.0 | 8 | 350.0 | 165.0 | 3693. | 11.5 | 70 | 1 | buick skylark 320 | . 18.0 | 8 | 318.0 | 150.0 | 3436. | 11.0 | 70 | 1 | plymouth satellite | . 16.0 | 8 | 304.0 | 150.0 | 3433. | 12.0 | 70 | 1 | amc rebel sst | . 17.0 | 8 | 302.0 | 140.0 | 3449. | 10.5 | 70 | 1 | ford torino | . Auto &lt;- read.table(&quot;Auto.data&quot;, header = T, na.strings = &quot;?&quot;, stringsAsFactors = T) . Auto &lt;- read.csv(&quot;Auto.csv&quot;, na.strings = &quot;?&quot;, stringsAsFactors = T) . dim(Auto) Auto[1:4, ] . &lt;ol class=list-inline&gt; 397 | 9 | &lt;/ol&gt; mpgcylindersdisplacementhorsepowerweightaccelerationyearoriginname . 18 | 8 | 307 | 130 | 3504 | 12.0 | 70 | 1 | chevrolet chevelle malibu | . 15 | 8 | 350 | 165 | 3693 | 11.5 | 70 | 1 | buick skylark 320 | . 18 | 8 | 318 | 150 | 3436 | 11.0 | 70 | 1 | plymouth satellite | . 16 | 8 | 304 | 150 | 3433 | 12.0 | 70 | 1 | amc rebel sst | . names(Auto) . &lt;ol class=list-inline&gt; &#39;mpg&#39; | &#39;cylinders&#39; | &#39;displacement&#39; | &#39;horsepower&#39; | &#39;weight&#39; | &#39;acceleration&#39; | &#39;year&#39; | &#39;origin&#39; | &#39;name&#39; | &lt;/ol&gt; plot(cylinders, mpg) . Error in plot(cylinders, mpg): object &#39;cylinders&#39; not found Traceback: 1. plot(cylinders, mpg) . plot(Auto$cylinders, Auto$mpg) attach(Auto) plot(cylinders, mpg) . cylinders &lt;- as.factor(cylinders) . plot(cylinders, mpg) plot(cylinders, mpg, col = &quot;red&quot;) plot(cylinders, mpg, col = &quot;red&quot;, varwidth = T) plot(cylinders, mpg, col = &quot;red&quot;, varwidth = T, horizontal = T) plot(cylinders, mpg, col = &quot;red&quot;, varwidth = T, xlab = &quot;cylinders&quot;, ylab = &quot;MPG&quot;) . hist(mpg) hist(mpg, col = 2) hist(mpg, col = 2, breaks = 15) . pairs(Auto) pairs( ~ mpg + displacement + horsepower + weight + acceleration, data = Auto ) . plot(horsepower, mpg) identify(horsepower, mpg, name) . summary(Auto) . mpg cylinders displacement horsepower weight Min. : 9.00 Min. :3.000 Min. : 68.0 Min. : 46.0 Min. :1613 1st Qu.:17.50 1st Qu.:4.000 1st Qu.:104.0 1st Qu.: 75.0 1st Qu.:2223 Median :23.00 Median :4.000 Median :146.0 Median : 93.5 Median :2800 Mean :23.52 Mean :5.458 Mean :193.5 Mean :104.5 Mean :2970 3rd Qu.:29.00 3rd Qu.:8.000 3rd Qu.:262.0 3rd Qu.:126.0 3rd Qu.:3609 Max. :46.60 Max. :8.000 Max. :455.0 Max. :230.0 Max. :5140 NA&#39;s :5 acceleration year origin name Min. : 8.00 Min. :70.00 Min. :1.000 ford pinto : 6 1st Qu.:13.80 1st Qu.:73.00 1st Qu.:1.000 amc matador : 5 Median :15.50 Median :76.00 Median :1.000 ford maverick : 5 Mean :15.56 Mean :75.99 Mean :1.574 toyota corolla: 5 3rd Qu.:17.10 3rd Qu.:79.00 3rd Qu.:2.000 amc gremlin : 4 Max. :24.80 Max. :82.00 Max. :3.000 amc hornet : 4 (Other) :368 . summary(mpg) . Min. 1st Qu. Median Mean 3rd Qu. Max. 9.00 17.50 23.00 23.52 29.00 46.60 . install.packages(&quot;ISLR2&quot;) . installing the source package &#39;ISLR2&#39; . library(MASS) . library(ISLR2) . Attaching package: &#39;ISLR2&#39; The following object is masked _by_ &#39;.GlobalEnv&#39;: Auto The following object is masked from &#39;package:MASS&#39;: Boston . head(Boston) . crimzninduschasnoxrmagedisradtaxptratiolstatmedv . 0.00632 | 18 | 2.31 | 0 | 0.538 | 6.575 | 65.2 | 4.0900 | 1 | 296 | 15.3 | 4.98 | 24.0 | . 0.02731 | 0 | 7.07 | 0 | 0.469 | 6.421 | 78.9 | 4.9671 | 2 | 242 | 17.8 | 9.14 | 21.6 | . 0.02729 | 0 | 7.07 | 0 | 0.469 | 7.185 | 61.1 | 4.9671 | 2 | 242 | 17.8 | 4.03 | 34.7 | . 0.03237 | 0 | 2.18 | 0 | 0.458 | 6.998 | 45.8 | 6.0622 | 3 | 222 | 18.7 | 2.94 | 33.4 | . 0.06905 | 0 | 2.18 | 0 | 0.458 | 7.147 | 54.2 | 6.0622 | 3 | 222 | 18.7 | 5.33 | 36.2 | . 0.02985 | 0 | 2.18 | 0 | 0.458 | 6.430 | 58.7 | 6.0622 | 3 | 222 | 18.7 | 5.21 | 28.7 | . lm.fit &lt;- lm(medv ∼ lstat) . Error in eval(predvars, data, env): object &#39;medv&#39; not found Traceback: 1. lm(medv ~ lstat) 2. eval(mf, parent.frame()) 3. eval(mf, parent.frame()) 4. stats::model.frame(formula = medv ~ lstat, drop.unused.levels = TRUE) 5. model.frame.default(formula = medv ~ lstat, drop.unused.levels = TRUE) 6. eval(predvars, data, env) 7. eval(predvars, data, env) . lm.fit &lt;- lm(medv ∼ lstat , data = Boston) . attach(Boston) . lm.fit &lt;- lm(medv ∼ lstat) . lm.fit . Call: lm(formula = medv ~ lstat) Coefficients: (Intercept) lstat 34.55 -0.95 . summary(lm.fit) . Call: lm(formula = medv ~ lstat) Residuals: Min 1Q Median 3Q Max -15.168 -3.990 -1.318 2.034 24.500 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 34.55384 0.56263 61.41 &lt;2e-16 *** lstat -0.95005 0.03873 -24.53 &lt;2e-16 *** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 6.216 on 504 degrees of freedom Multiple R-squared: 0.5441, Adjusted R-squared: 0.5432 F-statistic: 601.6 on 1 and 504 DF, p-value: &lt; 2.2e-16 . names(lm.fit) . &lt;ol class=list-inline&gt; &#39;coefficients&#39; | &#39;residuals&#39; | &#39;effects&#39; | &#39;rank&#39; | &#39;fitted.values&#39; | &#39;assign&#39; | &#39;qr&#39; | &#39;df.residual&#39; | &#39;xlevels&#39; | &#39;call&#39; | &#39;terms&#39; | &#39;model&#39; | &lt;/ol&gt; coef(lm.fit) . &lt;dl class=dl-horizontal&gt; (Intercept) 34.5538408793831 lstat -0.950049353757991 &lt;/dl&gt; confint(lm.fit) . 2.5 %97.5 % . (Intercept)33.448457 | 35.6592247 | . lstat-1.026148 | -0.8739505 | . predict(lm.fit , data.frame(lstat = (c(5, 10, 15))), interval = &quot;confidence&quot;) . fitlwrupr . 29.80359 | 29.00741 | 30.59978 | . 25.05335 | 24.47413 | 25.63256 | . 20.30310 | 19.73159 | 20.87461 | . predict(lm.fit , data.frame(lstat = (c(5, 10, 15))), interval = &quot;prediction&quot;) . fitlwrupr . 29.80359 | 17.565675 | 42.04151 | . 25.05335 | 12.827626 | 37.27907 | . 20.30310 | 8.077742 | 32.52846 | . plot(lstat , medv) abline(lm.fit) . plot(lstat , medv) abline(lm.fit , lwd = 3) . plot(lstat , medv) abline(lm.fit , lwd = 3,col = &quot;red&quot;) . plot(lstat , medv , col = &quot;red&quot;) . plot(lstat , medv , pch = 20) . plot(lstat , medv , pch = &quot;+&quot;) . plot (1:20 , 1:20, pch = 1:20) . par(mfrow = c(2, 2)) plot(lm.fit) . plot(predict(lm.fit), residuals(lm.fit)) plot(predict(lm.fit), rstudent(lm.fit)) . plot(hatvalues(lm.fit)) which.max(hatvalues(lm.fit)) . 375: 375 lm.fit &lt;- lm(medv ∼ lstat + age , data = Boston) summary(lm.fit) . Call: lm(formula = medv ~ lstat + age, data = Boston) Residuals: Min 1Q Median 3Q Max -15.981 -3.978 -1.283 1.968 23.158 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 33.22276 0.73085 45.458 &lt; 2e-16 *** lstat -1.03207 0.04819 -21.416 &lt; 2e-16 *** age 0.03454 0.01223 2.826 0.00491 ** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 6.173 on 503 degrees of freedom Multiple R-squared: 0.5513, Adjusted R-squared: 0.5495 F-statistic: 309 on 2 and 503 DF, p-value: &lt; 2.2e-16 . lm.fit &lt;- lm(medv ∼ ., data = Boston) summary(lm.fit) . Call: lm(formula = medv ~ ., data = Boston) Residuals: Min 1Q Median 3Q Max -15.1304 -2.7673 -0.5814 1.9414 26.2526 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 41.617270 4.936039 8.431 3.79e-16 *** crim -0.121389 0.033000 -3.678 0.000261 *** zn 0.046963 0.013879 3.384 0.000772 *** indus 0.013468 0.062145 0.217 0.828520 chas 2.839993 0.870007 3.264 0.001173 ** nox -18.758022 3.851355 -4.870 1.50e-06 *** rm 3.658119 0.420246 8.705 &lt; 2e-16 *** age 0.003611 0.013329 0.271 0.786595 dis -1.490754 0.201623 -7.394 6.17e-13 *** rad 0.289405 0.066908 4.325 1.84e-05 *** tax -0.012682 0.003801 -3.337 0.000912 *** ptratio -0.937533 0.132206 -7.091 4.63e-12 *** lstat -0.552019 0.050659 -10.897 &lt; 2e-16 *** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 4.798 on 493 degrees of freedom Multiple R-squared: 0.7343, Adjusted R-squared: 0.7278 F-statistic: 113.5 on 12 and 493 DF, p-value: &lt; 2.2e-16 . install.packages(&quot;car&quot;) . also installing the dependencies &#39;processx&#39;, &#39;glue&#39;, &#39;rprojroot&#39;, &#39;diffobj&#39;, &#39;rematch2&#39;, &#39;brio&#39;, &#39;callr&#39;, &#39;cli&#39;, &#39;desc&#39;, &#39;ellipsis&#39;, &#39;lifecycle&#39;, &#39;pkgload&#39;, &#39;praise&#39;, &#39;ps&#39;, &#39;rlang&#39;, &#39;waldo&#39;, &#39;withr&#39;, &#39;testthat&#39;, &#39;SparseM&#39;, &#39;MatrixModels&#39;, &#39;sp&#39;, &#39;minqa&#39;, &#39;nloptr&#39;, &#39;RcppEigen&#39;, &#39;carData&#39;, &#39;abind&#39;, &#39;pbkrtest&#39;, &#39;quantreg&#39;, &#39;maptools&#39;, &#39;lme4&#39; . There are binary versions available but the source versions are later: binary source needs_compilation glue 1.4.2 1.6.1 TRUE diffobj 0.3.4 0.3.5 TRUE brio 1.1.2 1.1.3 TRUE cli 2.5.0 3.2.0 TRUE desc 1.3.0 1.4.0 FALSE lifecycle 1.0.0 1.0.1 FALSE pkgload 1.2.1 1.2.4 FALSE rlang 0.4.11 1.0.1 TRUE waldo 0.2.5 0.3.1 FALSE withr 2.4.2 2.4.3 FALSE testthat 3.0.2 3.1.2 TRUE sp 1.4-5 1.4-6 TRUE nloptr 1.2.2.2 2.0.0 TRUE carData 3.0-4 3.0-5 FALSE quantreg 5.85 5.88 TRUE maptools 1.1-1 1.1-2 TRUE lme4 1.1-26 1.1-28 TRUE car 3.0-10 3.0-12 FALSE Binaries will be installed package &#39;processx&#39; successfully unpacked and MD5 sums checked package &#39;glue&#39; successfully unpacked and MD5 sums checked package &#39;rprojroot&#39; successfully unpacked and MD5 sums checked package &#39;diffobj&#39; successfully unpacked and MD5 sums checked package &#39;rematch2&#39; successfully unpacked and MD5 sums checked package &#39;brio&#39; successfully unpacked and MD5 sums checked package &#39;callr&#39; successfully unpacked and MD5 sums checked package &#39;cli&#39; successfully unpacked and MD5 sums checked package &#39;ellipsis&#39; successfully unpacked and MD5 sums checked package &#39;praise&#39; successfully unpacked and MD5 sums checked package &#39;ps&#39; successfully unpacked and MD5 sums checked package &#39;rlang&#39; successfully unpacked and MD5 sums checked package &#39;testthat&#39; successfully unpacked and MD5 sums checked package &#39;SparseM&#39; successfully unpacked and MD5 sums checked package &#39;MatrixModels&#39; successfully unpacked and MD5 sums checked package &#39;sp&#39; successfully unpacked and MD5 sums checked package &#39;minqa&#39; successfully unpacked and MD5 sums checked package &#39;nloptr&#39; successfully unpacked and MD5 sums checked package &#39;RcppEigen&#39; successfully unpacked and MD5 sums checked package &#39;abind&#39; successfully unpacked and MD5 sums checked package &#39;pbkrtest&#39; successfully unpacked and MD5 sums checked package &#39;quantreg&#39; successfully unpacked and MD5 sums checked package &#39;maptools&#39; successfully unpacked and MD5 sums checked package &#39;lme4&#39; successfully unpacked and MD5 sums checked The downloaded binary packages are in C: Users fanny.jiang AppData Local Temp RtmpgjggJe downloaded_packages . installing the source packages &#39;desc&#39;, &#39;lifecycle&#39;, &#39;pkgload&#39;, &#39;waldo&#39;, &#39;withr&#39;, &#39;carData&#39;, &#39;car&#39; . library(car) vif(lm.fit) . Loading required package: carData . &lt;dl class=dl-horizontal&gt; crim 1.76748591543101 zn 2.2984589077358 indus 3.98718063075709 chas 1.0711677737584 nox 4.36909262284478 rm 1.91253243743688 age 3.08823203973119 dis 3.95403664162829 rad 7.44530076006982 tax 9.00215766347177 ptratio 1.79705959312978 lstat 2.87077650084174 &lt;/dl&gt; lm.fit1 &lt;- lm(medv ∼ . - age, data = Boston) summary(lm.fit1) . Call: lm(formula = medv ~ . - age, data = Boston) Residuals: Min 1Q Median 3Q Max -15.1851 -2.7330 -0.6116 1.8555 26.3838 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 41.525128 4.919684 8.441 3.52e-16 *** crim -0.121426 0.032969 -3.683 0.000256 *** zn 0.046512 0.013766 3.379 0.000785 *** indus 0.013451 0.062086 0.217 0.828577 chas 2.852773 0.867912 3.287 0.001085 ** nox -18.485070 3.713714 -4.978 8.91e-07 *** rm 3.681070 0.411230 8.951 &lt; 2e-16 *** dis -1.506777 0.192570 -7.825 3.12e-14 *** rad 0.287940 0.066627 4.322 1.87e-05 *** tax -0.012653 0.003796 -3.333 0.000923 *** ptratio -0.934649 0.131653 -7.099 4.39e-12 *** lstat -0.547409 0.047669 -11.483 &lt; 2e-16 *** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 4.794 on 494 degrees of freedom Multiple R-squared: 0.7343, Adjusted R-squared: 0.7284 F-statistic: 124.1 on 11 and 494 DF, p-value: &lt; 2.2e-16 . lm.fit1 &lt;- update(lm.fit , ∼ . - age) . summary(lm(medv ∼ lstat * age , data = Boston)) . Call: lm(formula = medv ~ lstat * age, data = Boston) Residuals: Min 1Q Median 3Q Max -15.806 -4.045 -1.333 2.085 27.552 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 36.0885359 1.4698355 24.553 &lt; 2e-16 *** lstat -1.3921168 0.1674555 -8.313 8.78e-16 *** age -0.0007209 0.0198792 -0.036 0.9711 lstat:age 0.0041560 0.0018518 2.244 0.0252 * Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 6.149 on 502 degrees of freedom Multiple R-squared: 0.5557, Adjusted R-squared: 0.5531 F-statistic: 209.3 on 3 and 502 DF, p-value: &lt; 2.2e-16 . lm.fit2 &lt;- lm(medv ∼ lstat + I(lstat^2)) summary(lm.fit2) . Call: lm(formula = medv ~ lstat + I(lstat^2)) Residuals: Min 1Q Median 3Q Max -15.2834 -3.8313 -0.5295 2.3095 25.4148 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 42.862007 0.872084 49.15 &lt;2e-16 *** lstat -2.332821 0.123803 -18.84 &lt;2e-16 *** I(lstat^2) 0.043547 0.003745 11.63 &lt;2e-16 *** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 5.524 on 503 degrees of freedom Multiple R-squared: 0.6407, Adjusted R-squared: 0.6393 F-statistic: 448.5 on 2 and 503 DF, p-value: &lt; 2.2e-16 . lm.fit &lt;- lm(medv ∼ lstat) anova(lm.fit , lm.fit2) . Res.DfRSSDfSum of SqFPr(&gt;F) . 504 | 19472.38 | NA | NA | NA | NA | . 503 | 15347.24 | 1 | 4125.138 | 135.1998 | 7.630116e-28 | . par(mfrow = c(2, 2)) plot(lm.fit2) . lm.fit5 &lt;- lm(medv ∼ poly(lstat , 5)) summary(lm.fit5) . Call: lm(formula = medv ~ poly(lstat, 5)) Residuals: Min 1Q Median 3Q Max -13.5433 -3.1039 -0.7052 2.0844 27.1153 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 22.5328 0.2318 97.197 &lt; 2e-16 *** poly(lstat, 5)1 -152.4595 5.2148 -29.236 &lt; 2e-16 *** poly(lstat, 5)2 64.2272 5.2148 12.316 &lt; 2e-16 *** poly(lstat, 5)3 -27.0511 5.2148 -5.187 3.10e-07 *** poly(lstat, 5)4 25.4517 5.2148 4.881 1.42e-06 *** poly(lstat, 5)5 -19.2524 5.2148 -3.692 0.000247 *** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 5.215 on 500 degrees of freedom Multiple R-squared: 0.6817, Adjusted R-squared: 0.6785 F-statistic: 214.2 on 5 and 500 DF, p-value: &lt; 2.2e-16 . head(Carseats) . SalesCompPriceIncomeAdvertisingPopulationPriceShelveLocAgeEducationUrbanUS . 9.50 | 138 | 73 | 11 | 276 | 120 | Bad | 42 | 17 | Yes | Yes | . 11.22 | 111 | 48 | 16 | 260 | 83 | Good | 65 | 10 | Yes | Yes | . 10.06 | 113 | 35 | 10 | 269 | 80 | Medium | 59 | 12 | Yes | Yes | . 7.40 | 117 | 100 | 4 | 466 | 97 | Medium | 55 | 14 | Yes | Yes | . 4.15 | 141 | 64 | 3 | 340 | 128 | Bad | 38 | 13 | Yes | No | . 10.81 | 124 | 113 | 13 | 501 | 72 | Bad | 78 | 16 | No | Yes | . lm.fit &lt;- lm(Sales ∼ . + Income:Advertising + Price:Age, data = Carseats) summary(lm.fit) . Call: lm(formula = Sales ~ . + Income:Advertising + Price:Age, data = Carseats) Residuals: Min 1Q Median 3Q Max -2.9208 -0.7503 0.0177 0.6754 3.3413 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 6.5755654 1.0087470 6.519 2.22e-10 *** CompPrice 0.0929371 0.0041183 22.567 &lt; 2e-16 *** Income 0.0108940 0.0026044 4.183 3.57e-05 *** Advertising 0.0702462 0.0226091 3.107 0.002030 ** Population 0.0001592 0.0003679 0.433 0.665330 Price -0.1008064 0.0074399 -13.549 &lt; 2e-16 *** ShelveLocGood 4.8486762 0.1528378 31.724 &lt; 2e-16 *** ShelveLocMedium 1.9532620 0.1257682 15.531 &lt; 2e-16 *** Age -0.0579466 0.0159506 -3.633 0.000318 *** Education -0.0208525 0.0196131 -1.063 0.288361 UrbanYes 0.1401597 0.1124019 1.247 0.213171 USYes -0.1575571 0.1489234 -1.058 0.290729 Income:Advertising 0.0007510 0.0002784 2.698 0.007290 ** Price:Age 0.0001068 0.0001333 0.801 0.423812 Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 1.011 on 386 degrees of freedom Multiple R-squared: 0.8761, Adjusted R-squared: 0.8719 F-statistic: 210 on 13 and 386 DF, p-value: &lt; 2.2e-16 . attach(Carseats) contrasts(ShelveLoc) . GoodMedium . Bad0 | 0 | . Good1 | 0 | . Medium0 | 1 | . LoadLibraries &lt;- function () { library(ISLR2) library(MASS) print(&quot;The libraries have been loaded.&quot;) } . LoadLibraries function () { library(ISLR2) library(MASS) print (&quot;The libraries have been loaded .&quot;) } . &lt;pre class=language-r&gt;function () { &lt;span style=white-space:pre-wrap&gt; library(ISLR2)&lt;/span&gt; &lt;span style=white-space:pre-wrap&gt; library(MASS)&lt;/span&gt; &lt;span style=white-space:pre-wrap&gt; print(&quot;The libraries have been loaded.&quot;)&lt;/span&gt; }&lt;/pre&gt; &lt;pre class=language-r&gt;function () { &lt;span style=white-space:pre-wrap&gt; library(ISLR2)&lt;/span&gt; &lt;span style=white-space:pre-wrap&gt; library(MASS)&lt;/span&gt; &lt;span style=white-space:pre-wrap&gt; print(&quot;The libraries have been loaded .&quot;)&lt;/span&gt; }&lt;/pre&gt; LoadLibraries () . [1] &#34;The libraries have been loaded.&#34; .",
            "url": "https://fannyjiang88.github.io/Test/jupyter/2022/03/14/test.html",
            "relUrl": "/jupyter/2022/03/14/test.html",
            "date": " • Mar 14, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Assignment 6",
            "content": "x &lt;- c(1, 3, 2, 5) . x . &lt;ol class=list-inline&gt; 1 | 3 | 2 | 5 | &lt;/ol&gt; x = c(1, 6, 2) . x . &lt;ol class=list-inline&gt; 1 | 6 | 2 | &lt;/ol&gt; y = c(1, 4, 3) . length(x) length(y) x + y . 3 3 &lt;ol class=list-inline&gt; 2 | 10 | 5 | &lt;/ol&gt; ls() rm(x, y) ls() . &lt;ol class=list-inline&gt; &#39;A&#39; | &#39;Auto&#39; | &#39;cylinders&#39; | &#39;f&#39; | &#39;fa&#39; | &#39;lm.fit&#39; | &#39;u&#39; | &#39;x&#39; | &#39;y&#39; | &lt;/ol&gt; &lt;ol class=list-inline&gt; &#39;A&#39; | &#39;Auto&#39; | &#39;cylinders&#39; | &#39;f&#39; | &#39;fa&#39; | &#39;lm.fit&#39; | &#39;u&#39; | &lt;/ol&gt; rm(list = ls()) . ?matrix . x &lt;- matrix(data = c(1, 2, 3, 4), nrow = 2, ncol = 2) x . 1 | 3 | . 2 | 4 | . x &lt;- matrix(c(1, 2, 3, 4), 2, 2) . matrix(c(1, 2, 3, 4), 2, 2, byrow = TRUE) . 1 | 2 | . 3 | 4 | . sqrt(x) x^2 . 1.000000 | 1.732051 | . 1.414214 | 2.000000 | . 1 | 9 | . 4 | 16 | . x &lt;- rnorm(50) y &lt;- x + rnorm(50, mean = 50, sd = .1) cor(x, y) . 0.99363488072198 set.seed(1303) rnorm(50) . &lt;ol class=list-inline&gt; -1.14397631447974 | 1.34212936561501 | 2.18539047574276 | 0.536392517923731 | 0.0631929664685468 | 0.502234482468979 | -0.000416724686432643 | 0.565819840539162 | -0.572522688962623 | -1.11022500727696 | -0.0486871233624514 | -0.695656217619366 | 0.828917480303335 | 0.206652855081802 | -0.235674509102427 | -0.556310491381104 | -0.364754357080585 | 0.862355034263622 | -0.63077153536771 | 0.313602125215739 | -0.931495317661393 | 0.823867618473952 | 0.523370702077482 | 0.706921411979056 | 0.420204325601679 | -0.269052154682033 | -1.51031729990999 | -0.69021247657504 | -0.143471952443572 | -1.0135274099044 | 1.57327373614751 | 0.0127465054882014 | 0.872647049887217 | 0.422066190530336 | -0.0188157916578866 | 2.61574896890584 | -0.693140174826871 | -0.266321780991085 | -0.720636441231524 | 1.36773420645149 | 0.264007332160512 | 0.632186807367191 | -1.33065098578719 | 0.0268888182209596 | 1.0406363207788 | 1.31202379854711 | -0.0300020766733214 | -0.250025712488174 | 0.0234144856913592 | 1.65987065574227 | &lt;/ol&gt; set.seed(3) y &lt;- rnorm(100) . mean(y) var(y) sqrt(var(y)) sd(y) . 0.0110355710943715 0.732867501277449 0.856076808047881 0.856076808047881 x &lt;- rnorm(100) y &lt;- rnorm(100) plot(x, y) plot(x, y, xlab = &quot;this is the x-axis&quot;, ylab = &quot;this is the y-axis&quot;, main = &quot;Plot of X vs Y&quot;) . pdf(&quot;Figure.pdf&quot;) plot(x, y, col = &quot;green&quot;) dev.off() . png: 2 x &lt;- seq(1, 10) x x &lt;- 1:10 x x &lt;- seq(-pi, pi, length = 50) . &lt;ol class=list-inline&gt; 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | &lt;/ol&gt; &lt;ol class=list-inline&gt; 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | &lt;/ol&gt; y &lt;- x f &lt;- outer(x, y, function(x, y) cos(y) / (1 + x^2)) contour(x, y, f) contour(x, y, f, nlevels = 45, add = T) fa &lt;- (f - t(f)) / 2 contour(x, y, fa, nlevels = 15) . image(x, y, fa) persp(x, y, fa) persp(x, y, fa, theta = 30) persp(x, y, fa, theta = 30, phi = 20) persp(x, y, fa, theta = 30, phi = 70) persp(x, y, fa, theta = 30, phi = 40) . A &lt;- matrix(1:16, 4, 4) A . 1 | 5 | 9 | 13 | . 2 | 6 | 10 | 14 | . 3 | 7 | 11 | 15 | . 4 | 8 | 12 | 16 | . A[2, 3] . 10 A[c(1, 3), c(2, 4)] A[1:3, 2:4] A[1:2, ] A[, 1:2] . 5 | 13 | . 7 | 15 | . 5 | 9 | 13 | . 6 | 10 | 14 | . 7 | 11 | 15 | . 1 | 5 | 9 | 13 | . 2 | 6 | 10 | 14 | . 1 | 5 | . 2 | 6 | . 3 | 7 | . 4 | 8 | . A[1, ] . &lt;ol class=list-inline&gt; 1 | 5 | 9 | 13 | &lt;/ol&gt; A[-c(1, 3), ] A[-c(1, 3), -c(1, 3, 4)] . 2 | 6 | 10 | 14 | . 4 | 8 | 12 | 16 | . &lt;ol class=list-inline&gt; 6 | 8 | &lt;/ol&gt; Auto &lt;- read.table(&quot;Auto.data&quot;) View(Auto) . Error in View(Auto): &#39;View()&#39; not yet supported in the Jupyter R kernel Traceback: 1. View(Auto) 2. stop(sQuote(&#34;View()&#34;), &#34; not yet supported in the Jupyter R kernel&#34;) . head(Auto) . V1V2V3V4V5V6V7V8V9 . mpg | cylinders | displacement | horsepower | weight | acceleration | year | origin | name | . 18.0 | 8 | 307.0 | 130.0 | 3504. | 12.0 | 70 | 1 | chevrolet chevelle malibu | . 15.0 | 8 | 350.0 | 165.0 | 3693. | 11.5 | 70 | 1 | buick skylark 320 | . 18.0 | 8 | 318.0 | 150.0 | 3436. | 11.0 | 70 | 1 | plymouth satellite | . 16.0 | 8 | 304.0 | 150.0 | 3433. | 12.0 | 70 | 1 | amc rebel sst | . 17.0 | 8 | 302.0 | 140.0 | 3449. | 10.5 | 70 | 1 | ford torino | . Auto &lt;- read.table(&quot;Auto.data&quot;, header = T, na.strings = &quot;?&quot;, stringsAsFactors = T) . Auto &lt;- read.csv(&quot;Auto.csv&quot;, na.strings = &quot;?&quot;, stringsAsFactors = T) . dim(Auto) Auto[1:4, ] . &lt;ol class=list-inline&gt; 397 | 9 | &lt;/ol&gt; mpgcylindersdisplacementhorsepowerweightaccelerationyearoriginname . 18 | 8 | 307 | 130 | 3504 | 12.0 | 70 | 1 | chevrolet chevelle malibu | . 15 | 8 | 350 | 165 | 3693 | 11.5 | 70 | 1 | buick skylark 320 | . 18 | 8 | 318 | 150 | 3436 | 11.0 | 70 | 1 | plymouth satellite | . 16 | 8 | 304 | 150 | 3433 | 12.0 | 70 | 1 | amc rebel sst | . names(Auto) . &lt;ol class=list-inline&gt; &#39;mpg&#39; | &#39;cylinders&#39; | &#39;displacement&#39; | &#39;horsepower&#39; | &#39;weight&#39; | &#39;acceleration&#39; | &#39;year&#39; | &#39;origin&#39; | &#39;name&#39; | &lt;/ol&gt; plot(cylinders, mpg) . Error in plot(cylinders, mpg): object &#39;cylinders&#39; not found Traceback: 1. plot(cylinders, mpg) . plot(Auto$cylinders, Auto$mpg) attach(Auto) plot(cylinders, mpg) . cylinders &lt;- as.factor(cylinders) . plot(cylinders, mpg) plot(cylinders, mpg, col = &quot;red&quot;) plot(cylinders, mpg, col = &quot;red&quot;, varwidth = T) plot(cylinders, mpg, col = &quot;red&quot;, varwidth = T, horizontal = T) plot(cylinders, mpg, col = &quot;red&quot;, varwidth = T, xlab = &quot;cylinders&quot;, ylab = &quot;MPG&quot;) . hist(mpg) hist(mpg, col = 2) hist(mpg, col = 2, breaks = 15) . pairs(Auto) pairs( ~ mpg + displacement + horsepower + weight + acceleration, data = Auto ) . plot(horsepower, mpg) identify(horsepower, mpg, name) . summary(Auto) . mpg cylinders displacement horsepower weight Min. : 9.00 Min. :3.000 Min. : 68.0 Min. : 46.0 Min. :1613 1st Qu.:17.50 1st Qu.:4.000 1st Qu.:104.0 1st Qu.: 75.0 1st Qu.:2223 Median :23.00 Median :4.000 Median :146.0 Median : 93.5 Median :2800 Mean :23.52 Mean :5.458 Mean :193.5 Mean :104.5 Mean :2970 3rd Qu.:29.00 3rd Qu.:8.000 3rd Qu.:262.0 3rd Qu.:126.0 3rd Qu.:3609 Max. :46.60 Max. :8.000 Max. :455.0 Max. :230.0 Max. :5140 NA&#39;s :5 acceleration year origin name Min. : 8.00 Min. :70.00 Min. :1.000 ford pinto : 6 1st Qu.:13.80 1st Qu.:73.00 1st Qu.:1.000 amc matador : 5 Median :15.50 Median :76.00 Median :1.000 ford maverick : 5 Mean :15.56 Mean :75.99 Mean :1.574 toyota corolla: 5 3rd Qu.:17.10 3rd Qu.:79.00 3rd Qu.:2.000 amc gremlin : 4 Max. :24.80 Max. :82.00 Max. :3.000 amc hornet : 4 (Other) :368 . summary(mpg) . Min. 1st Qu. Median Mean 3rd Qu. Max. 9.00 17.50 23.00 23.52 29.00 46.60 . install.packages(&quot;ISLR2&quot;) . installing the source package &#39;ISLR2&#39; . library(MASS) . library(ISLR2) . Attaching package: &#39;ISLR2&#39; The following object is masked _by_ &#39;.GlobalEnv&#39;: Auto The following object is masked from &#39;package:MASS&#39;: Boston . head(Boston) . crimzninduschasnoxrmagedisradtaxptratiolstatmedv . 0.00632 | 18 | 2.31 | 0 | 0.538 | 6.575 | 65.2 | 4.0900 | 1 | 296 | 15.3 | 4.98 | 24.0 | . 0.02731 | 0 | 7.07 | 0 | 0.469 | 6.421 | 78.9 | 4.9671 | 2 | 242 | 17.8 | 9.14 | 21.6 | . 0.02729 | 0 | 7.07 | 0 | 0.469 | 7.185 | 61.1 | 4.9671 | 2 | 242 | 17.8 | 4.03 | 34.7 | . 0.03237 | 0 | 2.18 | 0 | 0.458 | 6.998 | 45.8 | 6.0622 | 3 | 222 | 18.7 | 2.94 | 33.4 | . 0.06905 | 0 | 2.18 | 0 | 0.458 | 7.147 | 54.2 | 6.0622 | 3 | 222 | 18.7 | 5.33 | 36.2 | . 0.02985 | 0 | 2.18 | 0 | 0.458 | 6.430 | 58.7 | 6.0622 | 3 | 222 | 18.7 | 5.21 | 28.7 | . lm.fit &lt;- lm(medv ∼ lstat) . Error in eval(predvars, data, env): object &#39;medv&#39; not found Traceback: 1. lm(medv ~ lstat) 2. eval(mf, parent.frame()) 3. eval(mf, parent.frame()) 4. stats::model.frame(formula = medv ~ lstat, drop.unused.levels = TRUE) 5. model.frame.default(formula = medv ~ lstat, drop.unused.levels = TRUE) 6. eval(predvars, data, env) 7. eval(predvars, data, env) . lm.fit &lt;- lm(medv ∼ lstat , data = Boston) . attach(Boston) . lm.fit &lt;- lm(medv ∼ lstat) . lm.fit . Call: lm(formula = medv ~ lstat) Coefficients: (Intercept) lstat 34.55 -0.95 . summary(lm.fit) . Call: lm(formula = medv ~ lstat) Residuals: Min 1Q Median 3Q Max -15.168 -3.990 -1.318 2.034 24.500 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 34.55384 0.56263 61.41 &lt;2e-16 *** lstat -0.95005 0.03873 -24.53 &lt;2e-16 *** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 6.216 on 504 degrees of freedom Multiple R-squared: 0.5441, Adjusted R-squared: 0.5432 F-statistic: 601.6 on 1 and 504 DF, p-value: &lt; 2.2e-16 . names(lm.fit) . &lt;ol class=list-inline&gt; &#39;coefficients&#39; | &#39;residuals&#39; | &#39;effects&#39; | &#39;rank&#39; | &#39;fitted.values&#39; | &#39;assign&#39; | &#39;qr&#39; | &#39;df.residual&#39; | &#39;xlevels&#39; | &#39;call&#39; | &#39;terms&#39; | &#39;model&#39; | &lt;/ol&gt; coef(lm.fit) . &lt;dl class=dl-horizontal&gt; (Intercept) 34.5538408793831 lstat -0.950049353757991 &lt;/dl&gt; confint(lm.fit) . 2.5 %97.5 % . (Intercept)33.448457 | 35.6592247 | . lstat-1.026148 | -0.8739505 | . predict(lm.fit , data.frame(lstat = (c(5, 10, 15))), interval = &quot;confidence&quot;) . fitlwrupr . 29.80359 | 29.00741 | 30.59978 | . 25.05335 | 24.47413 | 25.63256 | . 20.30310 | 19.73159 | 20.87461 | . predict(lm.fit , data.frame(lstat = (c(5, 10, 15))), interval = &quot;prediction&quot;) . fitlwrupr . 29.80359 | 17.565675 | 42.04151 | . 25.05335 | 12.827626 | 37.27907 | . 20.30310 | 8.077742 | 32.52846 | . plot(lstat , medv) abline(lm.fit) . plot(lstat , medv) abline(lm.fit , lwd = 3) . plot(lstat , medv) abline(lm.fit , lwd = 3,col = &quot;red&quot;) . plot(lstat , medv , col = &quot;red&quot;) . plot(lstat , medv , pch = 20) . plot(lstat , medv , pch = &quot;+&quot;) . plot (1:20 , 1:20, pch = 1:20) . par(mfrow = c(2, 2)) plot(lm.fit) . plot(predict(lm.fit), residuals(lm.fit)) plot(predict(lm.fit), rstudent(lm.fit)) . plot(hatvalues(lm.fit)) which.max(hatvalues(lm.fit)) . 375: 375 lm.fit &lt;- lm(medv ∼ lstat + age , data = Boston) summary(lm.fit) . Call: lm(formula = medv ~ lstat + age, data = Boston) Residuals: Min 1Q Median 3Q Max -15.981 -3.978 -1.283 1.968 23.158 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 33.22276 0.73085 45.458 &lt; 2e-16 *** lstat -1.03207 0.04819 -21.416 &lt; 2e-16 *** age 0.03454 0.01223 2.826 0.00491 ** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 6.173 on 503 degrees of freedom Multiple R-squared: 0.5513, Adjusted R-squared: 0.5495 F-statistic: 309 on 2 and 503 DF, p-value: &lt; 2.2e-16 . lm.fit &lt;- lm(medv ∼ ., data = Boston) summary(lm.fit) . Call: lm(formula = medv ~ ., data = Boston) Residuals: Min 1Q Median 3Q Max -15.1304 -2.7673 -0.5814 1.9414 26.2526 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 41.617270 4.936039 8.431 3.79e-16 *** crim -0.121389 0.033000 -3.678 0.000261 *** zn 0.046963 0.013879 3.384 0.000772 *** indus 0.013468 0.062145 0.217 0.828520 chas 2.839993 0.870007 3.264 0.001173 ** nox -18.758022 3.851355 -4.870 1.50e-06 *** rm 3.658119 0.420246 8.705 &lt; 2e-16 *** age 0.003611 0.013329 0.271 0.786595 dis -1.490754 0.201623 -7.394 6.17e-13 *** rad 0.289405 0.066908 4.325 1.84e-05 *** tax -0.012682 0.003801 -3.337 0.000912 *** ptratio -0.937533 0.132206 -7.091 4.63e-12 *** lstat -0.552019 0.050659 -10.897 &lt; 2e-16 *** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 4.798 on 493 degrees of freedom Multiple R-squared: 0.7343, Adjusted R-squared: 0.7278 F-statistic: 113.5 on 12 and 493 DF, p-value: &lt; 2.2e-16 . install.packages(&quot;car&quot;) . also installing the dependencies &#39;processx&#39;, &#39;glue&#39;, &#39;rprojroot&#39;, &#39;diffobj&#39;, &#39;rematch2&#39;, &#39;brio&#39;, &#39;callr&#39;, &#39;cli&#39;, &#39;desc&#39;, &#39;ellipsis&#39;, &#39;lifecycle&#39;, &#39;pkgload&#39;, &#39;praise&#39;, &#39;ps&#39;, &#39;rlang&#39;, &#39;waldo&#39;, &#39;withr&#39;, &#39;testthat&#39;, &#39;SparseM&#39;, &#39;MatrixModels&#39;, &#39;sp&#39;, &#39;minqa&#39;, &#39;nloptr&#39;, &#39;RcppEigen&#39;, &#39;carData&#39;, &#39;abind&#39;, &#39;pbkrtest&#39;, &#39;quantreg&#39;, &#39;maptools&#39;, &#39;lme4&#39; . There are binary versions available but the source versions are later: binary source needs_compilation glue 1.4.2 1.6.1 TRUE diffobj 0.3.4 0.3.5 TRUE brio 1.1.2 1.1.3 TRUE cli 2.5.0 3.2.0 TRUE desc 1.3.0 1.4.0 FALSE lifecycle 1.0.0 1.0.1 FALSE pkgload 1.2.1 1.2.4 FALSE rlang 0.4.11 1.0.1 TRUE waldo 0.2.5 0.3.1 FALSE withr 2.4.2 2.4.3 FALSE testthat 3.0.2 3.1.2 TRUE sp 1.4-5 1.4-6 TRUE nloptr 1.2.2.2 2.0.0 TRUE carData 3.0-4 3.0-5 FALSE quantreg 5.85 5.88 TRUE maptools 1.1-1 1.1-2 TRUE lme4 1.1-26 1.1-28 TRUE car 3.0-10 3.0-12 FALSE Binaries will be installed package &#39;processx&#39; successfully unpacked and MD5 sums checked package &#39;glue&#39; successfully unpacked and MD5 sums checked package &#39;rprojroot&#39; successfully unpacked and MD5 sums checked package &#39;diffobj&#39; successfully unpacked and MD5 sums checked package &#39;rematch2&#39; successfully unpacked and MD5 sums checked package &#39;brio&#39; successfully unpacked and MD5 sums checked package &#39;callr&#39; successfully unpacked and MD5 sums checked package &#39;cli&#39; successfully unpacked and MD5 sums checked package &#39;ellipsis&#39; successfully unpacked and MD5 sums checked package &#39;praise&#39; successfully unpacked and MD5 sums checked package &#39;ps&#39; successfully unpacked and MD5 sums checked package &#39;rlang&#39; successfully unpacked and MD5 sums checked package &#39;testthat&#39; successfully unpacked and MD5 sums checked package &#39;SparseM&#39; successfully unpacked and MD5 sums checked package &#39;MatrixModels&#39; successfully unpacked and MD5 sums checked package &#39;sp&#39; successfully unpacked and MD5 sums checked package &#39;minqa&#39; successfully unpacked and MD5 sums checked package &#39;nloptr&#39; successfully unpacked and MD5 sums checked package &#39;RcppEigen&#39; successfully unpacked and MD5 sums checked package &#39;abind&#39; successfully unpacked and MD5 sums checked package &#39;pbkrtest&#39; successfully unpacked and MD5 sums checked package &#39;quantreg&#39; successfully unpacked and MD5 sums checked package &#39;maptools&#39; successfully unpacked and MD5 sums checked package &#39;lme4&#39; successfully unpacked and MD5 sums checked The downloaded binary packages are in C: Users fanny.jiang AppData Local Temp RtmpgjggJe downloaded_packages . installing the source packages &#39;desc&#39;, &#39;lifecycle&#39;, &#39;pkgload&#39;, &#39;waldo&#39;, &#39;withr&#39;, &#39;carData&#39;, &#39;car&#39; . library(car) vif(lm.fit) . Loading required package: carData . &lt;dl class=dl-horizontal&gt; crim 1.76748591543101 zn 2.2984589077358 indus 3.98718063075709 chas 1.0711677737584 nox 4.36909262284478 rm 1.91253243743688 age 3.08823203973119 dis 3.95403664162829 rad 7.44530076006982 tax 9.00215766347177 ptratio 1.79705959312978 lstat 2.87077650084174 &lt;/dl&gt; lm.fit1 &lt;- lm(medv ∼ . - age, data = Boston) summary(lm.fit1) . Call: lm(formula = medv ~ . - age, data = Boston) Residuals: Min 1Q Median 3Q Max -15.1851 -2.7330 -0.6116 1.8555 26.3838 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 41.525128 4.919684 8.441 3.52e-16 *** crim -0.121426 0.032969 -3.683 0.000256 *** zn 0.046512 0.013766 3.379 0.000785 *** indus 0.013451 0.062086 0.217 0.828577 chas 2.852773 0.867912 3.287 0.001085 ** nox -18.485070 3.713714 -4.978 8.91e-07 *** rm 3.681070 0.411230 8.951 &lt; 2e-16 *** dis -1.506777 0.192570 -7.825 3.12e-14 *** rad 0.287940 0.066627 4.322 1.87e-05 *** tax -0.012653 0.003796 -3.333 0.000923 *** ptratio -0.934649 0.131653 -7.099 4.39e-12 *** lstat -0.547409 0.047669 -11.483 &lt; 2e-16 *** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 4.794 on 494 degrees of freedom Multiple R-squared: 0.7343, Adjusted R-squared: 0.7284 F-statistic: 124.1 on 11 and 494 DF, p-value: &lt; 2.2e-16 . lm.fit1 &lt;- update(lm.fit , ∼ . - age) . summary(lm(medv ∼ lstat * age , data = Boston)) . Call: lm(formula = medv ~ lstat * age, data = Boston) Residuals: Min 1Q Median 3Q Max -15.806 -4.045 -1.333 2.085 27.552 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 36.0885359 1.4698355 24.553 &lt; 2e-16 *** lstat -1.3921168 0.1674555 -8.313 8.78e-16 *** age -0.0007209 0.0198792 -0.036 0.9711 lstat:age 0.0041560 0.0018518 2.244 0.0252 * Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 6.149 on 502 degrees of freedom Multiple R-squared: 0.5557, Adjusted R-squared: 0.5531 F-statistic: 209.3 on 3 and 502 DF, p-value: &lt; 2.2e-16 . lm.fit2 &lt;- lm(medv ∼ lstat + I(lstat^2)) summary(lm.fit2) . Call: lm(formula = medv ~ lstat + I(lstat^2)) Residuals: Min 1Q Median 3Q Max -15.2834 -3.8313 -0.5295 2.3095 25.4148 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 42.862007 0.872084 49.15 &lt;2e-16 *** lstat -2.332821 0.123803 -18.84 &lt;2e-16 *** I(lstat^2) 0.043547 0.003745 11.63 &lt;2e-16 *** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 5.524 on 503 degrees of freedom Multiple R-squared: 0.6407, Adjusted R-squared: 0.6393 F-statistic: 448.5 on 2 and 503 DF, p-value: &lt; 2.2e-16 . lm.fit &lt;- lm(medv ∼ lstat) anova(lm.fit , lm.fit2) . Res.DfRSSDfSum of SqFPr(&gt;F) . 504 | 19472.38 | NA | NA | NA | NA | . 503 | 15347.24 | 1 | 4125.138 | 135.1998 | 7.630116e-28 | . par(mfrow = c(2, 2)) plot(lm.fit2) . lm.fit5 &lt;- lm(medv ∼ poly(lstat , 5)) summary(lm.fit5) . Call: lm(formula = medv ~ poly(lstat, 5)) Residuals: Min 1Q Median 3Q Max -13.5433 -3.1039 -0.7052 2.0844 27.1153 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 22.5328 0.2318 97.197 &lt; 2e-16 *** poly(lstat, 5)1 -152.4595 5.2148 -29.236 &lt; 2e-16 *** poly(lstat, 5)2 64.2272 5.2148 12.316 &lt; 2e-16 *** poly(lstat, 5)3 -27.0511 5.2148 -5.187 3.10e-07 *** poly(lstat, 5)4 25.4517 5.2148 4.881 1.42e-06 *** poly(lstat, 5)5 -19.2524 5.2148 -3.692 0.000247 *** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 5.215 on 500 degrees of freedom Multiple R-squared: 0.6817, Adjusted R-squared: 0.6785 F-statistic: 214.2 on 5 and 500 DF, p-value: &lt; 2.2e-16 . head(Carseats) . SalesCompPriceIncomeAdvertisingPopulationPriceShelveLocAgeEducationUrbanUS . 9.50 | 138 | 73 | 11 | 276 | 120 | Bad | 42 | 17 | Yes | Yes | . 11.22 | 111 | 48 | 16 | 260 | 83 | Good | 65 | 10 | Yes | Yes | . 10.06 | 113 | 35 | 10 | 269 | 80 | Medium | 59 | 12 | Yes | Yes | . 7.40 | 117 | 100 | 4 | 466 | 97 | Medium | 55 | 14 | Yes | Yes | . 4.15 | 141 | 64 | 3 | 340 | 128 | Bad | 38 | 13 | Yes | No | . 10.81 | 124 | 113 | 13 | 501 | 72 | Bad | 78 | 16 | No | Yes | . lm.fit &lt;- lm(Sales ∼ . + Income:Advertising + Price:Age, data = Carseats) summary(lm.fit) . Call: lm(formula = Sales ~ . + Income:Advertising + Price:Age, data = Carseats) Residuals: Min 1Q Median 3Q Max -2.9208 -0.7503 0.0177 0.6754 3.3413 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 6.5755654 1.0087470 6.519 2.22e-10 *** CompPrice 0.0929371 0.0041183 22.567 &lt; 2e-16 *** Income 0.0108940 0.0026044 4.183 3.57e-05 *** Advertising 0.0702462 0.0226091 3.107 0.002030 ** Population 0.0001592 0.0003679 0.433 0.665330 Price -0.1008064 0.0074399 -13.549 &lt; 2e-16 *** ShelveLocGood 4.8486762 0.1528378 31.724 &lt; 2e-16 *** ShelveLocMedium 1.9532620 0.1257682 15.531 &lt; 2e-16 *** Age -0.0579466 0.0159506 -3.633 0.000318 *** Education -0.0208525 0.0196131 -1.063 0.288361 UrbanYes 0.1401597 0.1124019 1.247 0.213171 USYes -0.1575571 0.1489234 -1.058 0.290729 Income:Advertising 0.0007510 0.0002784 2.698 0.007290 ** Price:Age 0.0001068 0.0001333 0.801 0.423812 Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 1.011 on 386 degrees of freedom Multiple R-squared: 0.8761, Adjusted R-squared: 0.8719 F-statistic: 210 on 13 and 386 DF, p-value: &lt; 2.2e-16 . attach(Carseats) contrasts(ShelveLoc) . GoodMedium . Bad0 | 0 | . Good1 | 0 | . Medium0 | 1 | . LoadLibraries &lt;- function () { library(ISLR2) library(MASS) print(&quot;The libraries have been loaded.&quot;) } . LoadLibraries function () { library(ISLR2) library(MASS) print (&quot;The libraries have been loaded .&quot;) } . &lt;pre class=language-r&gt;function () { &lt;span style=white-space:pre-wrap&gt; library(ISLR2)&lt;/span&gt; &lt;span style=white-space:pre-wrap&gt; library(MASS)&lt;/span&gt; &lt;span style=white-space:pre-wrap&gt; print(&quot;The libraries have been loaded.&quot;)&lt;/span&gt; }&lt;/pre&gt; &lt;pre class=language-r&gt;function () { &lt;span style=white-space:pre-wrap&gt; library(ISLR2)&lt;/span&gt; &lt;span style=white-space:pre-wrap&gt; library(MASS)&lt;/span&gt; &lt;span style=white-space:pre-wrap&gt; print(&quot;The libraries have been loaded .&quot;)&lt;/span&gt; }&lt;/pre&gt; LoadLibraries () . [1] &#34;The libraries have been loaded.&#34; .",
            "url": "https://fannyjiang88.github.io/Test/jupyter/2022/03/14/WK-6-Assignment.html",
            "relUrl": "/jupyter/2022/03/14/WK-6-Assignment.html",
            "date": " • Mar 14, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://fannyjiang88.github.io/Test/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://fannyjiang88.github.io/Test/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://fannyjiang88.github.io/Test/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://fannyjiang88.github.io/Test/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}